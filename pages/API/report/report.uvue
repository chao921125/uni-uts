<template>
  <!-- #ifdef APP -->
  <scroll-view style="flex:1">
  <!-- #endif -->
    <page-head title="report"></page-head>

    <view class="tips">
      <view class="tips-title">调用信息：</view>
      <view class="tips-content">{{msg}}</view>
    </view>
    <view class="page">

      <button class="normal-button" type="default" @click="handleAppLaunch">
        模拟应用启动
      </button>
      <button class="normal-button" type="default" @click="handleAppHide">
        模拟应用切入后台
      </button>
      <button class="normal-button" type="default" @click="handleAppShow">
        模拟应用切入前台
      </button>
      <button class="normal-button" type="default" @click="handleAppError">
        模拟应用错误
      </button>
      <text class="instructions">
        当前页面调用API均为模拟，请查看文档，在特定场景下使用以上 API。请在main.uts中设置统计debug配置为true，并点击按钮查控制台输出。
      </text>
    </view>

  <!-- #ifdef APP -->
  </scroll-view>
  <!-- #endif -->
</template>

<script>
  export default {
    data() {
      return {
        msg: '点击按钮，测试上报'
      }
    },
    methods: {
      handleAppLaunch() {
        const options = uni.getLaunchOptionsSync()
        uni.report({
          name: 'uni-app-launch',
          options: options,
          success:(res)=> {
            this.msg = 'onLaunch --> ' + res.errMsg
            console.log(res);
          }, fail:(err)=>  {
            this.msg = 'onLaunch --> ' + err.errMsg
            console.log(err);
          }
        })
      },
      handleAppHide() {
        uni.report({
          name: 'uni-app-hide',
          success:(res)=> {
            this.msg = 'onAppHide --> ' + res.errMsg
            console.log(res);
          }, fail:(err)=>  {
            this.msg = 'onAppHide --> ' + err.errMsg
            console.log(err);
          }
        })
      },
      handleAppShow() {
        // const options = uni.getLaunchOptionsSync()
        uni.report({
          name: 'uni-app-show',
          success:(res)=> {
            this.msg = 'onAppShow --> ' + res.errMsg
            console.log(res);
          }, fail:(err)=>  {
            this.msg = 'onAppShow --> ' + err.errMsg
            console.log(err);
          }
        })
      },
      handleAppError() {
        const errmsg = '测试错误'
        uni.report({
          name: 'uni-app-error',
          options: errmsg,
          success:(res)=> {
            this.msg = 'onAppError --> ' + res.errMsg
            console.log(res);
          }, fail:(err)=>  {
            this.msg = 'onAppError --> ' + err.errMsg
            console.log(err);
          }
        })
      },
    }
  }
</script>

<style>
  .page {
    padding: 15px;
  }

  .tips {
    margin: 15px;
    padding: 15px;
    background-color: #f5f5f5;
    font-size: 14px;
    text-align: center;
  }

  .tips-title {
    font-size: 16px;
    color: #333;
    margin-bottom: 10px;
  }
  .tips-content {
    font-size: 14px;
    color: #999;
  }

  .normal-button {
    width: 100%;
    margin-bottom: 10px;
  }

  .instructions {
    margin-top: 10px;
    margin-left: 10px;
    margin-right: 10px;
    background-color: #eee;
    font-size: 12px;
    color: #999;
  }
</style>
